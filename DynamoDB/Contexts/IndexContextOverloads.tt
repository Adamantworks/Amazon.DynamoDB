// Copyright 2015 Adamantworks.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="$(SolutionDir)DynamoDB.CodeGen\bin\Debug\Adamantworks.Amazon.DynamoDB.CodeGen.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Adamantworks.Amazon.DynamoDB.CodeGen" #>
<#
	var indexQuery = new Method("IReverseSyntax", "Query", "new QueryContext",
		Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ProjectionArg, Params.ConsistentArg, Params.HashKey, Params.Filter, Params.Values)
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ProjectionArg, Params.ConsistentArg, Params.HashKey, Params.ConverterSkipped, Params.Filter, Params.Values))
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ProjectionArg, Params.ConsistentArg, Params.HashKeyObject, Params.Filter, Params.Values))
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ProjectionArg, Params.ConsistentArg, Params.HashKeyObjectConverter, Params.ConverterSkipped, Params.Filter, Params.Values))
		.Where(Params.NoValuesWithoutFilter));
	var indexQueryCount = new Method("IQueryCountRangeSyntax", "QueryCount", "new QueryCountContext",
		Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ConsistentArg, Params.HashKey, Params.Filter, Params.Values)
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ConsistentArg, Params.HashKey, Params.ConverterSkipped, Params.Filter, Params.Values))
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ConsistentArg, Params.HashKeyObject, Params.Filter, Params.Values))
		.Concat(Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ConsistentArg, Params.HashKeyObjectConverter, Params.ConverterSkipped, Params.Filter, Params.Values))
		.Where(Params.NoValuesWithoutFilter));
	var indexScan = new Method("IScanLimitToOrPagedSyntax", "Scan", "new ScanContext",
		Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.ProjectionArg, Params.Filter, Params.Values)
		.Where(Params.NoValuesWithoutFilter));
	var indexScanCount = new Method("IScanCountOptionsSyntax", "ScanCount", "new ScanCountContext",
		Params.GenOverloads(true, Params.IndexDotTableArg, Params.IndexArg, Params.Filter, Params.Values)
		.Where(Params.NoValuesWithoutFilter));
#>
using Adamantworks.Amazon.DynamoDB.Converters;
using Adamantworks.Amazon.DynamoDB.DynamoDBValues;
using Adamantworks.Amazon.DynamoDB.Syntax;

namespace Adamantworks.Amazon.DynamoDB.Contexts
{
	internal partial class IndexContext
	{
<#=		indexQuery.GenMethods() #>

<#=		indexQueryCount.GenMethods() #>

<#=		indexScan.GenMethods() #>

<#=		indexScanCount.GenMethods() #>
	}
}