// Copyright 2015 Adamantworks.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="$(SolutionDir)DynamoDB.CodeGen\bin\Debug\Adamantworks.Amazon.DynamoDB.CodeGen.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Adamantworks.Amazon.DynamoDB.CodeGen" #>
<#
	// Syntax
	var putAsync = new Method("Task<DynamoDBMap>", "PutAsync",
		Params.GenOverloads(Params.Item, Params.ReturnOldItem, Params.CancellationToken));
	var put = new Method("DynamoDBMap", "Put",
		Params.GenOverloads(Params.Item, Params.ReturnOldItem));
	var updateAsync = new Method("Task<DynamoDBMap>", "UpdateAsync",
		Params.GenOverloads(Params.UpdateExp, Params.Values, Params.UpdateReturnValue, Params.CancellationToken));
	var update = new Method("DynamoDBMap", "Update",
		Params.GenOverloads(Params.UpdateExp, Params.Values, Params.UpdateReturnValue));
	var tryUpdateAsync = new Method("Task<bool>", "TryUpdateAsync",
		Params.GenOverloads(Params.UpdateExp, Params.Values, Params.CancellationToken));
	var tryUpdate = new Method("bool", "TryUpdate",
		Params.GenOverloads(Params.UpdateExp, Params.Values));
	var deleteAsync = new Method("Task<DynamoDBMap>", "DeleteAsync",
		Params.GenOverloads(Params.ReturnOldItem, Params.CancellationToken));
	var delete = new Method("DynamoDBMap", "Delete",
		Params.GenOverloads(Params.ReturnOldItem));
	var scanAllAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "AllAsync",
		Params.GenOverloads(Params.ReadAhead));
	var scanSegmentAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "SegmentAsync",
		Params.GenOverloads(Params.Segment, Params.TotalSegments, Params.ReadAhead));

	// Query Range
	var allKeysAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "AllKeysAsync", Params.GenOverloads(Params.ReadAhead));
	var rangeKeyBeginsWithAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyBeginsWithAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyBeginsWith = new Method("IEnumerable<DynamoDBMap>", "RangeKeyBeginsWith",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyEqualsAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyEqualsAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyEquals = new Method("IEnumerable<DynamoDBMap>", "RangeKeyEquals",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyLessThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyLessThan = new Method("IEnumerable<DynamoDBMap>", "RangeKeyLessThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanOrEqualToAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyLessThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyLessThanOrEqualTo = new Method("IEnumerable<DynamoDBMap>", "RangeKeyLessThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyGreaterThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyGreaterThan = new Method("IEnumerable<DynamoDBMap>", "RangeKeyGreaterThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanOrEqualToAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyGreaterThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyGreaterThanOrEqualTo = new Method("IEnumerable<DynamoDBMap>", "RangeKeyGreaterThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyBetweenAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyBetweenAsync",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads, Params.ReadAhead));
	var rangeKeyBetween = new Method("IEnumerable<DynamoDBMap>", "RangeKeyBetween",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads));

	// Query Range Paged
	var allKeysAsyncPaged = new Method("Task<ItemPage>", "AllKeysAsync", Params.GenOverloads(Params.CancellationToken));
	var rangeKeyBeginsWithAsyncPaged = new Method("Task<ItemPage>", "RangeKeyBeginsWithAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyBeginsWithPaged = new Method("ItemPage", "RangeKeyBeginsWith",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyEqualsAsyncPaged = new Method("Task<ItemPage>", "RangeKeyEqualsAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyEqualsPaged = new Method("ItemPage", "RangeKeyEquals",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanAsyncPaged = new Method("Task<ItemPage>", "RangeKeyLessThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyLessThanPaged = new Method("ItemPage", "RangeKeyLessThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanOrEqualToAsyncPaged = new Method("Task<ItemPage>", "RangeKeyLessThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyLessThanOrEqualToPaged = new Method("ItemPage", "RangeKeyLessThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanAsyncPaged = new Method("Task<ItemPage>", "RangeKeyGreaterThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyGreaterThanPaged = new Method("ItemPage", "RangeKeyGreaterThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanOrEqualToAsyncPaged = new Method("Task<ItemPage>", "RangeKeyGreaterThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.CancellationToken));
	var rangeKeyGreaterThanOrEqualToPaged = new Method("ItemPage", "RangeKeyGreaterThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyBetweenAsyncPaged = new Method("Task<ItemPage>", "RangeKeyBetweenAsync",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads, Params.CancellationToken));
	var rangeKeyBetweenPaged = new Method("ItemPage", "RangeKeyBetween",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads));

	// Scan Options Paged
	var scanAllAsyncPaged = new Method("Task<ItemPage>", "AllAsync", Params.GenOverloads(Params.CancellationToken));
	var scanSegmentAsyncPaged = new Method("Task<ItemPage>", "SegmentAsync", Params.GenOverloads(Params.Segment, Params.TotalSegments, Params.CancellationToken));
#>
using Adamantworks.Amazon.DynamoDB.Converters;
using Adamantworks.Amazon.DynamoDB.DynamoDBValues;
using Adamantworks.Amazon.DynamoDB.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Adamantworks.Amazon.DynamoDB.Syntax
{
	public partial interface IModifySyntax
	{
<#=		updateAsync.GenInterface() #>
<#=		update.GenInterface() #>

<#=		deleteAsync.GenInterface() #>
<#=		delete.GenInterface() #>
	}

	public partial interface IPagedQueryRangeSyntax
	{
<#=		allKeysAsyncPaged.GenInterface() #>

<#=		rangeKeyBeginsWithAsyncPaged.GenInterface() #>
<#=		rangeKeyBeginsWithPaged.GenInterface() #>

<#=		rangeKeyEqualsAsyncPaged.GenInterface() #>
<#=		rangeKeyEqualsPaged.GenInterface() #>

<#=		rangeKeyLessThanAsyncPaged.GenInterface() #>
<#=		rangeKeyLessThanPaged.GenInterface() #>

<#=		rangeKeyLessThanOrEqualToAsyncPaged.GenInterface() #>
<#=		rangeKeyLessThanOrEqualToPaged.GenInterface() #>

<#=		rangeKeyGreaterThanAsyncPaged.GenInterface() #>
<#=		rangeKeyGreaterThanPaged.GenInterface() #>

<#=		rangeKeyGreaterThanOrEqualToAsyncPaged.GenInterface() #>
<#=		rangeKeyGreaterThanOrEqualToPaged.GenInterface() #>

<#=		rangeKeyBetweenAsyncPaged.GenInterface() #>
<#=		rangeKeyBetweenPaged.GenInterface() #>
	}

	public partial interface IPagedScanOptionsSyntax
	{
<#=		scanAllAsyncPaged.GenInterface() #>

<#=		scanSegmentAsyncPaged.GenInterface() #>
	}

	public partial interface IPutSyntax
	{
<#=		putAsync.GenInterface() #>
<#=		put.GenInterface() #>
	}



	public partial interface IQueryRangeSyntax
	{
<#=		allKeysAsync.GenInterface() #>

<#=		rangeKeyBeginsWithAsync.GenInterface() #>
<#=		rangeKeyBeginsWith.GenInterface() #>

<#=		rangeKeyEqualsAsync.GenInterface() #>
<#=		rangeKeyEquals.GenInterface() #>

<#=		rangeKeyLessThanAsync.GenInterface() #>
<#=		rangeKeyLessThan.GenInterface() #>

<#=		rangeKeyLessThanOrEqualToAsync.GenInterface() #>
<#=		rangeKeyLessThanOrEqualTo.GenInterface() #>

<#=		rangeKeyGreaterThanAsync.GenInterface() #>
<#=		rangeKeyGreaterThan.GenInterface() #>

<#=		rangeKeyGreaterThanOrEqualToAsync.GenInterface() #>
<#=		rangeKeyGreaterThanOrEqualTo.GenInterface() #>

<#=		rangeKeyBetweenAsync.GenInterface() #>
<#=		rangeKeyBetween.GenInterface() #>
	}

	public partial interface IQuerySyntax
	{
<#=		Methods.Query.GenInterface() #>

<#=		Methods.QueryCount.GenInterface() #>
	}

	public partial interface IScanOptionsSyntax
	{
<#=		scanAllAsync.GenInterface() #>

<#=		scanSegmentAsync.GenInterface() #>
	}

	public partial interface ITryModifySyntax
	{
<#=		tryUpdateAsync.GenInterface() #>
<#=		tryUpdate.GenInterface() #>
	}
}

namespace Adamantworks.Amazon.DynamoDB.Contexts
{
	internal partial class ModifyContext
	{
<#=		updateAsync.GenMethods() #>

<#=		update.GenMethods() #>

<#=		tryUpdateAsync.GenMethods() #>

<#=		tryUpdate.GenMethods() #>

<#=		deleteAsync.GenMethods() #>

<#=		delete.GenMethods() #>
	}

	internal partial class PutContext
	{
<#=		putAsync.GenMethods() #>

<#=		put.GenMethods() #>
	}

	internal partial class QueryContext
	{
<#=		allKeysAsync.GenMethods() #>

<#=		rangeKeyBeginsWithAsync.GenMethods() #>

<#=		rangeKeyBeginsWith.GenMethods() #>

<#=		rangeKeyEqualsAsync.GenMethods() #>

<#=		rangeKeyEquals.GenMethods() #>

<#=		rangeKeyLessThanAsync.GenMethods() #>

<#=		rangeKeyLessThan.GenMethods() #>

<#=		rangeKeyLessThanOrEqualToAsync.GenMethods() #>

<#=		rangeKeyLessThanOrEqualTo.GenMethods() #>

<#=		rangeKeyGreaterThanAsync.GenMethods() #>

<#=		rangeKeyGreaterThan.GenMethods() #>

<#=		rangeKeyGreaterThanOrEqualToAsync.GenMethods() #>

<#=		rangeKeyGreaterThanOrEqualTo.GenMethods() #>

<#=		rangeKeyBetweenAsync.GenMethods() #>

<#=		rangeKeyBetween.GenMethods() #>

<#=		allKeysAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyBeginsWithAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyBeginsWithPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyEqualsAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyEqualsPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyLessThanAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyLessThanPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyLessThanOrEqualToAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyLessThanOrEqualToPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyGreaterThanAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyGreaterThanPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyGreaterThanOrEqualToAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyGreaterThanOrEqualToPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyBetweenAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		rangeKeyBetweenPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>
	}

	internal partial class QueryCountContext
	{
<#=		Methods.CountAllKeysAsync.GenMethods() #>

<#=		Methods.CountRangeKeyBeginsWithAsync.GenMethods() #>

<#=		Methods.CountRangeKeyBeginsWith.GenMethods() #>

<#=		Methods.CountRangeKeyEqualsAsync.GenMethods() #>

<#=		Methods.CountRangeKeyEquals.GenMethods() #>

<#=		Methods.CountRangeKeyLessThanAsync.GenMethods() #>

<#=		Methods.CountRangeKeyLessThan.GenMethods() #>

<#=		Methods.CountRangeKeyLessThanOrEqualToAsync.GenMethods() #>

<#=		Methods.CountRangeKeyLessThanOrEqualTo.GenMethods() #>

<#=		Methods.CountRangeKeyGreaterThanAsync.GenMethods() #>

<#=		Methods.CountRangeKeyGreaterThan.GenMethods() #>

<#=		Methods.CountRangeKeyGreaterThanOrEqualToAsync.GenMethods() #>

<#=		Methods.CountRangeKeyGreaterThanOrEqualTo.GenMethods() #>

<#=		Methods.CountRangeKeyBetweenAsync.GenMethods() #>

<#=		Methods.CountRangeKeyBetween.GenMethods() #>
	}

	internal partial class ScanContext
	{
<#=		scanAllAsync.GenMethods() #>

<#=		scanAllAsyncPaged.GenExplicitImplementations("IPagedScanOptionsSyntax") #>

<#=		scanSegmentAsync.GenMethods() #>

<#=		scanSegmentAsyncPaged.GenExplicitImplementations("IPagedScanOptionsSyntax") #>
	}
}
