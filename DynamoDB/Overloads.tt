// Copyright 2015 Adamantworks.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="$(SolutionDir)DynamoDB.CodeGen\bin\Debug\Adamantworks.Amazon.DynamoDB.CodeGen.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Adamantworks.Amazon.DynamoDB.CodeGen" #>
<#
	// Syntax
	var tryUpdateAsync = new Method("Task<bool>", "TryUpdateAsync",
		Params.GenOverloads(Params.UpdateExp, Params.Values, Params.CancellationToken));
	var tryUpdate = new Method("bool", "TryUpdate",
		Params.GenOverloads(Params.UpdateExp, Params.Values));
	var scanAllAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "AllAsync",
		Params.GenOverloads(Params.ReadAhead));
	var scanSegmentAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "SegmentAsync",
		Params.GenOverloads(Params.Segment, Params.TotalSegments, Params.ReadAhead));

	// Query Range
	var allKeysAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "AllKeysAsync", Params.GenOverloads(Params.ReadAhead));
	var rangeKeyBeginsWithAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyBeginsWithAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyBeginsWith = new Method("IEnumerable<DynamoDBMap>", "RangeKeyBeginsWith",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyEqualsAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyEqualsAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyEquals = new Method("IEnumerable<DynamoDBMap>", "RangeKeyEquals",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyLessThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyLessThan = new Method("IEnumerable<DynamoDBMap>", "RangeKeyLessThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyLessThanOrEqualToAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyLessThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyLessThanOrEqualTo = new Method("IEnumerable<DynamoDBMap>", "RangeKeyLessThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyGreaterThanAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyGreaterThan = new Method("IEnumerable<DynamoDBMap>", "RangeKeyGreaterThan",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyGreaterThanOrEqualToAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyGreaterThanOrEqualToAsync",
		Params.GenOverloads(false, Params.RangeKeyOverloads, Params.ReadAhead));
	var rangeKeyGreaterThanOrEqualTo = new Method("IEnumerable<DynamoDBMap>", "RangeKeyGreaterThanOrEqualTo",
		Params.GenOverloads(false, Params.RangeKeyOverloads));
	var rangeKeyBetweenAsync = new Method("IAsyncEnumerable<DynamoDBMap>", "RangeKeyBetweenAsync",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads, Params.ReadAhead));
	var rangeKeyBetween = new Method("IEnumerable<DynamoDBMap>", "RangeKeyBetween",
		Params.GenOverloads(false, Params.RangeKeyBetweenOverloads));
#>
using Adamantworks.Amazon.DynamoDB.Converters;
using Adamantworks.Amazon.DynamoDB.DynamoDBValues;
using Adamantworks.Amazon.DynamoDB.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Adamantworks.Amazon.DynamoDB.Syntax
{
	public partial interface IQueryRangeSyntax
	{
<#=		allKeysAsync.GenInterface() #>

<#=		rangeKeyBeginsWithAsync.GenInterface() #>
<#=		rangeKeyBeginsWith.GenInterface() #>

<#=		rangeKeyEqualsAsync.GenInterface() #>
<#=		rangeKeyEquals.GenInterface() #>

<#=		rangeKeyLessThanAsync.GenInterface() #>
<#=		rangeKeyLessThan.GenInterface() #>

<#=		rangeKeyLessThanOrEqualToAsync.GenInterface() #>
<#=		rangeKeyLessThanOrEqualTo.GenInterface() #>

<#=		rangeKeyGreaterThanAsync.GenInterface() #>
<#=		rangeKeyGreaterThan.GenInterface() #>

<#=		rangeKeyGreaterThanOrEqualToAsync.GenInterface() #>
<#=		rangeKeyGreaterThanOrEqualTo.GenInterface() #>

<#=		rangeKeyBetweenAsync.GenInterface() #>
<#=		rangeKeyBetween.GenInterface() #>
	}

	public partial interface IScanOptionsSyntax
	{
<#=		scanAllAsync.GenInterface() #>

<#=		scanSegmentAsync.GenInterface() #>
	}

	public partial interface ITryModifySyntax
	{
<#=		tryUpdateAsync.GenInterface() #>
<#=		tryUpdate.GenInterface() #>
	}
}

namespace Adamantworks.Amazon.DynamoDB.Contexts
{
	internal partial class ModifyContext
	{
<#=		Methods.UpdateAsync.GenMethods() #>

<#=		Methods.Update.GenMethods() #>

<#=		tryUpdateAsync.GenMethods() #>

<#=		tryUpdate.GenMethods() #>

<#=		Methods.DeleteAsync.GenMethods() #>

<#=		Methods.Delete.GenMethods() #>
	}

	internal partial class QueryContext
	{
<#=		allKeysAsync.GenMethods() #>

<#=		rangeKeyBeginsWithAsync.GenMethods() #>

<#=		rangeKeyBeginsWith.GenMethods() #>

<#=		rangeKeyEqualsAsync.GenMethods() #>

<#=		rangeKeyEquals.GenMethods() #>

<#=		rangeKeyLessThanAsync.GenMethods() #>

<#=		rangeKeyLessThan.GenMethods() #>

<#=		rangeKeyLessThanOrEqualToAsync.GenMethods() #>

<#=		rangeKeyLessThanOrEqualTo.GenMethods() #>

<#=		rangeKeyGreaterThanAsync.GenMethods() #>

<#=		rangeKeyGreaterThan.GenMethods() #>

<#=		rangeKeyGreaterThanOrEqualToAsync.GenMethods() #>

<#=		rangeKeyGreaterThanOrEqualTo.GenMethods() #>

<#=		rangeKeyBetweenAsync.GenMethods() #>

<#=		rangeKeyBetween.GenMethods() #>

<#=		Methods.AllKeysAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyBeginsWithAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyBeginsWithPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyEqualsAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyEqualsPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyLessThanAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyLessThanPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyLessThanOrEqualToAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyLessThanOrEqualToPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyGreaterThanAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyGreaterThanPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyGreaterThanOrEqualToAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyGreaterThanOrEqualToPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyBetweenAsyncPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>

<#=		Methods.RangeKeyBetweenPaged.GenExplicitImplementations("IPagedQueryRangeSyntax") #>
	}

	internal partial class ScanContext
	{
<#=		scanAllAsync.GenMethods() #>

<#=		Methods.ScanAllAsyncPaged.GenExplicitImplementations("IPagedScanOptionsSyntax") #>

<#=		scanSegmentAsync.GenMethods() #>

<#=		Methods.ScanSegmentAsyncPaged.GenExplicitImplementations("IPagedScanOptionsSyntax") #>
	}
}
